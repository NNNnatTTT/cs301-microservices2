services:
  # db:
  #   image: postgres:16
  #   container_name: agentdb
  #   # ports:
  #   #   - "${PGPORT}:5432"
  #   environment:
  #     POSTGRES_USER: ${PGUSER}
  #     POSTGRES_PASSWORD: ${PGPASSWORD}
  #     POSTGRES_DB: ${PGDB}
  #   # env_file:
  #   #   - ./agent-service/.env
  #   volumes:
  #     # persistent data volume
  #     - dbdata:/var/lib/postgresql/data
  #     # init scripts (run ONCE on fresh volume)
  #     - ./agent-service/docker/init:/docker-entrypoint-initdb.d:ro
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${PGUSER} -d ${PGDB}"]
  #     interval: 5s
  #     timeout: 3s
  #     retries: 20

  profile-db:
    image: postgres:16
    container_name: profiledb
    environment:
      POSTGRES_USER: ${PROFILE_PGUSER}
      POSTGRES_PASSWORD: ${PROFILE_PGPASSWORD}
      POSTGRES_DB: ${PROFILE_PGDB}
    volumes:
      - profile_dbdata:/var/lib/postgresql/data
      # seed data for profile service (optional)
      - ./profile-service/docker/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PROFILE_PGUSER} -d ${PROFILE_PGDB}"]
      interval: 5s
      timeout: 3s
      retries: 20

  # account-db:
  #   image: postgres:16
  #   container_name: accountdb
  #   environment:
  #     POSTGRES_USER: ${ACCOUNT_PGUSER}
  #     POSTGRES_PASSWORD: ${ACCOUNT_PGPASSWORD}
  #     POSTGRES_DB: ${ACCOUNT_PGDB}
  #   volumes:
  #     - account_dbdata:/var/lib/postgresql/data
  #     # seed data for account service (optional)
  #     - ./account-service/docker/init:/docker-entrypoint-initdb.d:ro
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${ACCOUNT_PGUSER} -d ${ACCOUNT_PGDB}"]
  #     interval: 5s
  #     timeout: 3s
  #     retries: 20

  # transaction-db:
  #   image: postgres:16
  #   container_name: transactiondb
  #   environment:
  #     POSTGRES_USER: ${TRANSACTION_PGUSER}
  #     POSTGRES_PASSWORD: ${TRANSACTION_PGPASSWORD}
  #     POSTGRES_DB: ${TRANSACTION_PGDB}
  #   volumes:
  #     - transaction_dbdata:/var/lib/postgresql/data
  #     # seed data for transaction service (optional)
  #     - ./transaction-service/docker/init:/docker-entrypoint-initdb.d:ro
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${TRANSACTION_PGUSER} -d ${TRANSACTION_PGDB}"]
  #     interval: 5s
  #     timeout: 3s
  #     retries: 20


  
  # agent-service:
  #   build:
  #     context: ./agent-service
  #     dockerfile: Dockerfile
  #   env_file:
  #     - ./agent-service/.env
  #   container_name: agent-service
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     DATABASE_URL: postgres://${PGUSER}:${PGPASSWORD}@db:5432/${PGDB}
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   # (Optional for local dev hot-reload)
  #   volumes:
  #     - ./agent-service:/usr/src/app
  
  profile-service:
    build:
      context: ./profile-service
      dockerfile: Dockerfile
    env_file:
      - ./profile-service/.env
    container_name: profile-service
    ports:
      - "3001:3000"
    environment:
      DATABASE_URL: postgres://${PROFILE_PGUSER}:${PROFILE_PGPASSWORD}@profile-db:5432/${PROFILE_PGDB}
    depends_on:
      profile-db:
        condition: service_healthy
    volumes:
      - ./profile-service:/usr/src/app

  # account-service:
  #   build:
  #     context: ./account-service
  #     dockerfile: Dockerfile
  #   env_file:
  #     - ./account-service/.env
  #   container_name: account-service
  #   ports:
  #     - "3003:3000"
  #   environment:
  #     DATABASE_URL: postgres://${ACCOUNT_PGUSER}:${ACCOUNT_PGPASSWORD}@ACCOUNT-db:5432/${ACCOUNT_PGDB}
  #   depends_on:
  #     account-db:
  #       condition: service_healthy
  #   volumes:
  #     - ./account-service:/usr/src/app

  # transaction-service:
  #   build:
  #     context: ./transaction-service
  #     dockerfile: Dockerfile
  #   env_file:
  #     - ./transaction-service/.env
  #   container_name: transaction-service
  #   ports:
  #     - "3002:3000"
  #   environment:
  #     DATABASE_URL: postgres://${TRANSACTION_PGUSER}:${TRANSACTION_PGPASSWORD}@TRANSACTION-db:5432/${TRANSACTION_PGDB}
  #   depends_on:
  #     transaction-db:
  #       condition: service_healthy
  #   volumes:
  #     - ./transaction-service:/usr/src/app


  # # Optional web UI to poke the DB
  # adminer:
  #   image: adminer
  #   ports:
  #     - "8080:8080"
  #   depends_on:
  #     - db

volumes:
  # dbdata:
  profile_dbdata:
  # transaction_dbdata:
  # account_dbdata:

  # docker compose down -v at the end
